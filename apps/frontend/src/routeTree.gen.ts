/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AppRouteRouteImport } from './routes/_app/route'
import { Route as AppIndexRouteImport } from './routes/_app/index'
import { Route as AppSettingsIndexRouteImport } from './routes/_app/settings/index'
import { Route as AppCommentsIndexRouteImport } from './routes/_app/comments/index'
import { Route as AppAssignedIndexRouteImport } from './routes/_app/assigned/index'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppSettingsIndexRoute = AppSettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppCommentsIndexRoute = AppCommentsIndexRouteImport.update({
  id: '/comments/',
  path: '/comments/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppAssignedIndexRoute = AppAssignedIndexRouteImport.update({
  id: '/assigned/',
  path: '/assigned/',
  getParentRoute: () => AppRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/': typeof AppIndexRoute
  '/assigned': typeof AppAssignedIndexRoute
  '/comments': typeof AppCommentsIndexRoute
  '/settings': typeof AppSettingsIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/': typeof AppIndexRoute
  '/assigned': typeof AppAssignedIndexRoute
  '/comments': typeof AppCommentsIndexRoute
  '/settings': typeof AppSettingsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_app/': typeof AppIndexRoute
  '/_app/assigned/': typeof AppAssignedIndexRoute
  '/_app/comments/': typeof AppCommentsIndexRoute
  '/_app/settings/': typeof AppSettingsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/register'
    | '/'
    | '/assigned'
    | '/comments'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/register' | '/' | '/assigned' | '/comments' | '/settings'
  id:
    | '__root__'
    | '/_app'
    | '/login'
    | '/register'
    | '/_app/'
    | '/_app/assigned/'
    | '/_app/comments/'
    | '/_app/settings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/settings/': {
      id: '/_app/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AppSettingsIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/comments/': {
      id: '/_app/comments/'
      path: '/comments'
      fullPath: '/comments'
      preLoaderRoute: typeof AppCommentsIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/assigned/': {
      id: '/_app/assigned/'
      path: '/assigned'
      fullPath: '/assigned'
      preLoaderRoute: typeof AppAssignedIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}

interface AppRouteRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
  AppAssignedIndexRoute: typeof AppAssignedIndexRoute
  AppCommentsIndexRoute: typeof AppCommentsIndexRoute
  AppSettingsIndexRoute: typeof AppSettingsIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppIndexRoute: AppIndexRoute,
  AppAssignedIndexRoute: AppAssignedIndexRoute,
  AppCommentsIndexRoute: AppCommentsIndexRoute,
  AppSettingsIndexRoute: AppSettingsIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
